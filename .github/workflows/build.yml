name: Build and Deploy Image Container

on:
  push:
    branches: [ 'main' ]
    paths-ignore:
      - '**/README.md'

env:
  DOTNET_VERSION: '6.0.x' 
  BUILD_CONFIGURATION: 'Release'    
  PUBLISH_PROJECT: 'TheAA.Configuration.Api/TheAA.Configuration.Api.csproj'
  AZURE_ACR_REPOSITORY: 'configuration-api'
  SONAR_CLOUD_PROJECT_KEY: 'aaireland_dotnet-configuration-service'

defaults:
  run:
    working-directory: ./src

# Ensures only one execution per branch will run at a time.
concurrency:
  group: ${{ github.ref }}
  
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.7
      with:
        versionSpec: '5.x'

    - name: Setup GitVersion
      uses: gittools/actions/gitversion/execute@v0.9.7
      id: gitversion

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        source-url: ${{ secrets.PACKAGES_FEED_URL }}
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.NUGET_AUTH_TOKEN }}
            
    - name: Restore dependencies
      run: dotnet restore

    - name: Install SonarCloud
      run: dotnet tool install --global dotnet-sonarscanner

    - name: Begin SonarCloud Scan
      run: |
            dotnet sonarscanner begin /o:"${{ secrets.SONAR_CLOUD_ORGANIZATION }}" \
                                    /k:"${{ env.SONAR_CLOUD_PROJECT_KEY }}" \
                                    /v:"${{ steps.gitversion.outputs.nuGetVersionV2 }}" \
                                    /d:sonar.host.url="${{ secrets.SONAR_CLOUD_URL }}" \
                                    /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
                                    /d:sonar.cs.opencover.reportsPaths=./CoverageResults/coverage.opencover.xml \
                                    /d:sonar.coverage.exclusions="**Test*.cs" \
                                    /d:sonar.qualitygate.wait=true

    - name: Install & Run Azurite
      run: npm install -g azurite

    - name: Run Azurite in Background
      shell: bash
      run: azurite-blob &
    
    - name: Build
      run: dotnet build --no-restore --configuration ${{ env.BUILD_CONFIGURATION }} -p:GeneratePackageOnBuild=false

    - name: Test
      run: |
            dotnet test --no-restore --no-build --verbosity normal --configuration ${{ env.BUILD_CONFIGURATION }} \
                    /p:CollectCoverage=true \
                    /p:CoverletOutput=../CoverageResults/ \
                    /p:MergeWith="../CoverageResults/coverage.json" \
                    /p:CoverletOutputFormat=\"opencover,json\" \
                    -m:1

    - name: End SonarCloud Scan
      run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create package(s)
      run: dotnet pack -c ${{ env.BUILD_CONFIGURATION }} -p:PackageVersion=${{ steps.gitversion.outputs.nuGetVersionV2 }}
            
    - name: Publish package(s)
      run: dotnet nuget push --source ${{ secrets.PACKAGES_FEED_URL }} --api-key ${{ secrets.GITHUB_TOKEN }} **/bin/Release/*.*nupkg
        
    - name: Publish API
      run: dotnet publish ${{ env.PUBLISH_PROJECT }} --no-build --configuration ${{ env.BUILD_CONFIGURATION }} --output './../publish'
   
    - name: Login to Azure Container Registry 
      uses: azure/docker-login@v1
      with:
          login-server: ${{ secrets.AZURE_ACR_SERVER }}
          username: ${{ secrets.AZURE_ACR_USERNAME }}
          password: ${{ secrets.AZURE_ACR_PASSWORD }}
      
    - name: Push Image to Azure Container Registry
      if: steps.gitversion.outputs.CommitsSinceVersionSource > 0
      run: |
          docker build -f docker/Dockerfile . -t ${{ secrets.AZURE_ACR_SERVER }}/${{ env.AZURE_ACR_REPOSITORY }}:${{ steps.gitversion.outputs.nuGetVersionV2 }}
          docker push ${{ secrets.AZURE_ACR_SERVER }}/${{ env.AZURE_ACR_REPOSITORY }}:${{ steps.gitversion.outputs.nuGetVersionV2 }}
      working-directory: ./

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      if: steps.gitversion.outputs.CommitsSinceVersionSource > 0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.gitversion.outputs.nuGetVersionV2}}
        release_name: Release ${{ steps.gitversion.outputs.nuGetVersionV2}}
